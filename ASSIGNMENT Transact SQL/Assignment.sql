SELECT name, database_id, create_date
From sys.databases ;
GO
use TSQL_Assignment

-- 01 ADD CUSTOMER --
IF OBJECT_ID('ADD_CUSTOMER') IS NOT NULL
DROP PROCEDURE ADD_CUSTOMER;
GO

CREATE PROCEDURE ADD_CUSTOMER @PCUSTID INT, @PCUSTNAME NVARCHAR(100) AS

BEGIN
    BEGIN TRY

        IF @PCUSTID < 1 OR @PCUSTID > 499
            THROW 50020, 'Customer ID out of range', 1

        INSERT INTO CUSTOMER (CUSTID, CUSTNAME, SALES_YTD, STATUS) 
        VALUES (@PCUSTID, @PCUSTNAME, 0, 'OK');

    END TRY
    BEGIN CATCH
        if ERROR_NUMBER() = 2627
            THROW 50010, 'Duplicate customer ID', 1
        ELSE IF ERROR_NUMBER() = 50020
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

-- 02 DELETE ALL CUSTOMERS --
IF OBJECT_ID('DELETE_ALL_CUSTOMERS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_CUSTOMERS;
GO

CREATE PROCEDURE DELETE_ALL_CUSTOMERS AS

BEGIN
    BEGIN TRY

        DELETE FROM CUSTOMER

    END TRY
    BEGIN CATCH
        BEGIN
            DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERRORMESSAGE, 1
        END;
    END CATCH;
    
    PRINT 'Number of rows deleted is ' + CAST(@@ROWCOUNT as char(3));  
END;

-- 03 ADD PRODUCT --
IF OBJECT_ID('ADD_PRODUCT') IS NOT NULL
DROP PROCEDURE ADD_PRODUCT;
GO

CREATE PROCEDURE ADD_PRODUCT @PPRODID INT, @PPRODNAME NVARCHAR, @PPRICE MONEY AS

BEGIN
    BEGIN TRY

        IF @PPRODID < 1000 OR @PPRODID > 2500
            THROW 50040, 'Product ID out of range.', 1

        IF @PPRICE < 0 OR @PPRICE > 999.99
            THROW 50050, 'Price out of range.', 1

        INSERT INTO PRODUCT (PRODID, PRODNAME, SELLING_PRICE, SALES_YTD) 
        VALUES (@PPRODID, @PPRODNAME, @PPRICE, 0);

    END TRY
    BEGIN CATCH
        IF ERROR_NUMBER() = 2627
            THROW 50030, 'Duplicate Product ID', 1
        ELSE IF ERROR_NUMBER() = 50040
            THROW
        ELSE IF ERROR_NUMBER() = 50050
            THROW
        ELSE 
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 
    END CATCH;

END;

-- 04 DELETE ALL PRODUCTS --
IF OBJECT_ID('DELETE_ALL_PRODUCTS') IS NOT NULL
DROP PROCEDURE DELETE_ALL_PRODUCTS;
GO

CREATE PROCEDURE DELETE_ALL_PRODUCTS AS

BEGIN
    BEGIN TRY

        DELETE FROM PRODUCT

    END TRY
    BEGIN CATCH

        BEGIN
            DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
            THROW 50000, @ERRORMESSAGE, 1
        END;

    END CATCH;  
END;
PRINT 'Number of rows deleted is ' + CAST(@@ROWCOUNT as char(3));


-- 05 GET CUSTOMER STRING --
IF OBJECT_ID('GET_CUSTOMER_STRING') IS NOT NULL
DROP PROCEDURE GET_CUSTOMER_STRING;
GO

CREATE PROCEDURE GET_CUSTOMER_STRING @PCUSTID INT, @PRETURNSTRING NVARCHAR(1000) OUTPUT AS

BEGIN
    BEGIN TRY

        DECLARE @CUSTNAME NVARCHAR(100), @STATUS NVARCHAR(7), @YTD MONEY

        SELECT @CUSTNAME = CUSTNAME, @STATUS = [STATUS], @YTD = SALES_YTD
        FROM CUSTOMER
        WHERE CUSTID = @PCUSTID 

        IF @@ROWCOUNT = 0
            THROW 50060, 'Customer ID not found', 1

        SET @PRETURNSTRING = CONCAT('Custid: ', @PCUSTID,'Name: ', @CUSTNAME, 'Status: ', @STATUS, 'SalesYTD: ', @YTD);

    END TRY
    BEGIN CATCH

        IF ERROR_NUMBER() = 50060
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1 
            END;

    END CATCH;

END;

-- 06 UPDATE CUSTOMER SALESYTD --
IF OBJECT_ID('UPD_CUST_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_CUST_SALESYTD;
GO

CREATE PROCEDURE UPD_CUST_SALESYTD @PCUSTID INT, @PAMT MONEY AS

BEGIN
    BEGIN TRY

        DECLARE @EXAMPLECUSTID INT = 1, @EXAMPLEAMOUNT MONEY = 100;

        IF @@ROWCOUNT = 0
            THROW 50070, 'Customer ID not found.', 1

        IF (@EXAMPLEAMOUNT > 999.99 OR @EXAMPLEAMOUNT < -999.99)
            THROW 50080, 'Amount out of range.', 1

        UPDATE CUSTOMER SET SALES_YTD = SALES_YTD + @EXAMPLEAMOUNT WHERE CUSTID = @EXAMPLECUSTID


    END TRY
    BEGIN CATCH

        IF ERROR_NUMBER() = 50070
            THROW
        ELSE IF ERROR_NUMBER() = 50080
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1 
            END;

    END CATCH;
END;

-- 07 GET PRODUCT STRING --
IF OBJECT_ID('GET_PROD_STRING') IS NOT NULL
DROP PROCEDURE GET_PROD_STRING;
GO

CREATE PROCEDURE GET_PROD_STRING @PPRODID INT, @PRETURNSTRING NVARCHAR(100) OUTPUT AS

BEGIN
    BEGIN TRY
    
        DECLARE @CUSTNAME NVARCHAR(100), @PRICE MONEY, @YTD MONEY

        SELECT @CUSTNAME = CUSTNAME, @PRICE = PRICE, @YTD = SALES_YTD
        FROM CUSTOMER
        WHERE PRODID = @PPRODID
    
        IF @@ROWCOUNT = 0
            THROW 50090, 'Product ID not found', 1

        SET @PRETURNSTRING = CONCAT('Prodid: ', @PPRODID,'Name: ', @CUSTNAME, 'Price: ', @PRICE, 'SalesYTD: ', @YTD);

    END TRY
    BEGIN CATCH

        IF ERROR_MESSAGE() = 50090
            THROW
        ELSE 
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1
            END; 

    END CATCH;
END;

-- 08 UPDATE PRODUCT SALESYTD
IF OBJECT_ID('UPD_PROD_SALESYTD') IS NOT NULL
DROP PROCEDURE UPD_PROD_SALESYTD;
GO

CREATE PROCEDURE UPD_PROD_SALESYTD @PPRODID INT, @PAMT MONEY AS

BEGIN
    BEGIN TRY

        DECLARE @EXAMPLEPRODID INT = 1, @EXAMPLEAMOUNT MONEY = 100;

        IF @@ROWCOUNT = 0
            THROW 50100, 'Product ID not found.', 1

        IF (@EXAMPLEAMOUNT > 999.99 OR @EXAMPLEAMOUNT < -999.99)
            THROW 50110, 'Amount out of range.', 1

        UPDATE PRODUCT SET SALES_YTD = SALES_YTD + @EXAMPLEAMOUNT WHERE PRODID = @EXAMPLEPRODID


    END TRY
    BEGIN CATCH

        IF ERROR_NUMBER() = 50100
            THROW
        ELSE IF ERROR_NUMBER() = 50110
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1 
            END;

    END CATCH;
END;

-- 09 UPDATE CUSTOMER STATUS --
IF OBJECT_ID('UPD_CUST_STATUS') IS NOT NULL
DROP PROCEDURE UPD_CUST_STATUS;
GO

CREATE PROCEDURE UPD_CUST_STATUS @PCUSTID INT, @PSTATUS NVARCHAR(MAX) AS

BEGIN
    BEGIN TRY

        DECLARE @EXAMPLECUSTSTATUS INT = 1, @EXAMPLESTATUS NVARCHAR(MAX);

        IF @@ROWCOUNT = 0
            THROW 50120, 'Customer status not found.', 1

        IF (@EXAMPLESTATUS <> '')
            THROW 50130, 'Invalid status value', 1

        
        UPDATE CUSTOMER SET [STATUS] = [STATUS] + @EXAMPLESTATUS WHERE CUSTSTATUS = @EXAMPLECUSTSTATUS

    END TRY
    BEGIN CATCH

        IF ERROR_NUMBER() = 50120
            THROW
        ELSE IF ERROR_NUMBER() = 50130
            THROW
        ELSE
            BEGIN
                DECLARE @ERRORMESSAGE NVARCHAR(MAX) = ERROR_MESSAGE();
                THROW 50000, @ERRORMESSAGE, 1 
            END;

    END CATCH;
END;
-- 10 ADD SIMPLE SALE -- 